import bpy

bl_info = {
    'name': 'RenderNotify',
    'category': 'All',
    'author': 'Joseph Hansen',
    'version': (1, 2, 1),
    'blender': (3, 6, 13),
    'location': '',
    'description': 'Desktop and sound notifications when a render is done'
}

from bpy.app.handlers import persistent
import aud

import sys
import subprocess
import os

sound = False
desktop = False
notified = False
sound_path = ''

try:
    from notifypy import Notify
except ImportError:
    python_exe = os.path.join(sys.prefix, 'bin', 'python3.10')
    if not os.path.exists(python_exe):
        python_exe = os.path.join(sys.prefix, 'bin', 'python3')
    if not os.path.exists(python_exe):
        python_exe = os.path.join(sys.prefix, 'bin', 'python')
    
    # upgrade pip
    subprocess.call([python_exe, "-m", "ensurepip"])
    subprocess.call([python_exe, "-m", "pip", "install", "--upgrade", "pip"])
    # install required packages
    subprocess.call([python_exe, "-m", "pip", "install", "notify-py"])

@persistent
def render_post(self):
    global sound, desktop
    sound = bpy.context.preferences.addons[__name__].preferences.sound
    desktop = bpy.context.preferences.addons[__name__].preferences.desktop

    if bpy.context.scene.frame_current == bpy.context.scene.frame_end or bpy.context.scene.frame_start == bpy.context.scene.frame_end:
        if sound:
            device = aud.Device()
            sound = aud.Sound(bpy.context.preferences.addons[__name__].preferences.sound_path)
            handle = device.play(sound)
            sound_buffered = aud.Sound.cache(sound)
            handle_buffered = device.play(sound_buffered)
        
        if desktop:
            notification = Notify()
            notification.title = "Render complete"
            notification.message = "Your Blender render is complete"
            notification.send()

bpy.app.handlers.render_post.append(render_post)


class renderNotifyPreferences(bpy.types.AddonPreferences):
    bl_idname = __name__
    sound: bpy.props.BoolProperty(
        name = "Sound",
        default = False
    )
    desktop: bpy.props.BoolProperty(
        name = "Desktop notification",
        default = True
    )
    sound_path: bpy.props.StringProperty(
        name = "Path to sound file",
        subtype = "FILE_PATH",
        options = {"LIBRARY_EDITABLE"},
        maxlen = 1024)
 
    def draw(self, context):
        layout = self.layout
        layout.label(text='')
        row = layout.row()
        row.prop(self, 'sound', expand=True)
        row = layout.row()
        row.prop(self, 'sound_path', expand=True)
        row.prop(self, 'desktop', expand=True)
        row = layout.row()

def register():
    bpy.utils.register_class(renderNotifyPreferences)
    
def unregister():
    bpy.utils.unregister_class(renderNotifyPreferences)
    if render_post in bpy.app.handlers.render_post:
        bpy.app.handlers.render_post.remove(render_post)

if __name__ == '__main__':
    register()
